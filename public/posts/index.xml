<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on memduh</title><link>/posts/</link><description>Recent content in Posts on memduh</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 07 Aug 2025 10:00:00 +0300</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Custom Thread Pool in C++</title><link>/posts/implementing-custom-thread-pool-cpp/</link><pubDate>Thu, 07 Aug 2025 10:00:00 +0300</pubDate><guid>/posts/implementing-custom-thread-pool-cpp/</guid><description/></item><item><title>Implementing Custom Memory Allocator in C++</title><link>/posts/custom-memory-allocator-implementation/</link><pubDate>Wed, 06 Aug 2025 10:00:00 +0300</pubDate><guid>/posts/custom-memory-allocator-implementation/</guid><description>&lt;p>In this post, I elaborate on my implementation of a memory allocator in C++. The &lt;code>malloc&lt;/code>, &lt;code>calloc&lt;/code>, &lt;code>realloc&lt;/code>, and &lt;code>free&lt;/code> functions are implemented and discussed. The aim is to provide educational content on how these functions work under the hood. Not all aspects are taken into account in this custom implementation; however, this provides a sufficient introduction to memory management in C++. Note that standard allocators like &lt;strong>glibc malloc&lt;/strong> are highly optimized and have been battle-tested for decades.&lt;/p></description></item><item><title>Implementing Custom Slab Allocator with C++</title><link>/posts/slab-allocator-implementation/</link><pubDate>Sat, 25 Jan 2025 09:15:00 +0300</pubDate><guid>/posts/slab-allocator-implementation/</guid><description>&lt;p>nothing to see here&lt;/p></description></item><item><title>Consensus Protocols</title><link>/posts/consensus-protocols/</link><pubDate>Mon, 16 May 2022 11:00:00 +0300</pubDate><guid>/posts/consensus-protocols/</guid><description>&lt;h1 id="consensus-protocols">
 Consensus Protocols
 &lt;a class="heading-link" href="#consensus-protocols">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>Consensus protocols are the backbone of distributed systems, enabling multiple nodes to agree on a single state or value despite potential failures and network partitions. From traditional distributed databases to modern blockchain networks, consensus protocols ensure reliability and consistency in decentralized environments.&lt;/p>
&lt;figure>&lt;img src="/images/angry.png" width="600">
&lt;/figure>

&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;12 Angry Men&amp;rdquo; film shows 12 jurors deciding the future of an 18-year-old boy accused of murder. For a decision to emerge from the room, &lt;strong>unanimity&lt;/strong> must be achieved.&lt;/em>&lt;/p></description></item></channel></rss>